### numpy记录

#### numpy.array(object, dtype = None, copy = True, order = None, subok = False, ndmin = 0)

- object 任何暴露数组接口方法的对象都会返回一个数组或任何(嵌套)序列。
- dtype 数组的所需数据类型，可选。
- copy 可选，默认为true，对象是否被复制。
- order C(按行)、F(按列)或A(任意，默认)。
- subok 默认情况下，返回的数组被强制为基类数组。 如果为true，则返回子类。
- ndimin 指定返回数组的最小维数。

```
import numpy as np 
a = np.array([1,2,3])
# [1, 2, 3]
a = np.array([[1,2],[3,4]])
# [[1, 2]
#  [3, 4]]
a = np.array([1,2,3], ndmin=2)  
# [[1,2,3]]
```


#### 数据类型 numpy.dtype(object, align, copy)

- object 被转换为数据类型的对象。
- align 如果为true，则向字段添加间隔，使其类似 C 的结构体。
- copy 生成dtype对象的新副本，如果为flase，结果是内建数据类型对象的引用。

bool_,存储为一个字节的布尔值(真或假)
int_,默认整数，相当于 C 的long，通常为int32或int64
intc,相当于 C 的int，通常为int32或int64
intp,用于索引的整数，相当于 C 的size_t，通常为int32或int64
int8,字节(-128 ~ 127)
int16,16 位整数(-32768 ~ 32767)
int32,32 位整数(-2147483648 ~ 2147483647)
int64,64 位整数(-9223372036854775808 ~ 9223372036854775807)
uint8,8位 无符号整数(0 ~ 255)
uint16,16 位无符号整数(0 ~ 65535)
uint32,32 位无符号整数(0 ~ 4294967295)
uint64,64 位无符号整数(0 ~ 18446744073709551615)
float_,float64的简写
float16,半精度浮点：符号位，5 位指数，10 位尾数
float32,单精度浮点：符号位，8 位指数，23 位尾数
float64,双精度浮点：符号位，11 位指数，52 位尾数
complex_,complex128的简写
complex64,复数，由两个 32 位浮点表示(实部和虚部)
complex128,复数，由两个 64 位浮点表示(实部和虚部)


```
import numpy as np
#int8，int16，int32，int64 可替换为等价的字符串 'i1'，'i2'，'i4'，以及其他。  
dt = np.dtype(np.int32)
# int32
dt = np.dtype('i4')  
# int32
# 使用端记号  
# 字节顺序取决于数据类型的前缀 < 或 > 。
# < 意味着编码是小端(最小有效字节存储在最小地址中)。
# > 意味着编码是大端(最大有效字节存储在最小地址中)。
dt = np.dtype('>i4') 
# >i4
dt = np.dtype([('age',np.int8)])  
# [('age','i1')]
a = np.array([(10,),(20,),(30,)], dtype=dt)  
# [(10,) (20,) (30,)] 
# 访问age列的内容  
a['age']
# [10 20 30]
# 定义名为student的结构化数据类型
student = np.dtype([('name','S20'),('age','i1'),('marks','f4')])  
# [('name','S20'),('age','i1'),('marks','<f4')])
a = np.array([('abc',21,50),('xyz',18,75)], dtype=student) 
# [('abc',21,50.0), ('xyz',18,75.0)]
a = np.array([1,2,3],dtype=complex)  
# [1.+0.j,2.+0.j,3.+0.j]
```
每个内建类型都有一个唯一定义它的字符代码：
'b'：布尔值
'i'：符号整数
'u'：无符号整数
'f'：浮点
'c'：复数浮点
'm'：时间间隔
'M'：日期时间
'O'：Python 对象
'S', 'a'：字节串
'U'：Unicode
'V'：原始数据(void)

#### 数组属性 

##### shape 数组维度的元组
```
import numpy as np 
a = np.array([[1,2,3],[4,5,6]])  
a.shape
# (2, 3)
b = a.reshape(3,2)
# [[1, 2] 
#  [3, 4] 
#  [5, 6]]
```

##### ndim 数组的维数
```
import numpy as np 
a = np.arange(4)
# [ 0 1 2 3 4  5  6  7  8  9  10  11  12  13  14  15  16 17 18 19 20 21 22 23]
a.ndim 
# 1
b = a.reshape(2,4,3)  
# 三个维度
# [[[0,1,2] 
#   [3,4,5] 
#   [6,7,8] 
#   [9,10,11]]  
#  [[12,13,14] 
#   [15,16,17]
#   [18,19,20] 
#   [21,22,23]]]
b.ndim 
# 3
```

##### itemsize 数组中每个元素的字节单位长度
```
import numpy as np 
# 数组的 dtype 为 int8(一个字节)  
x = np.array([1,2,3,4,5], dtype = np.int8)  
x.itemsize
# 1
# 数组的 dtype 为 float32(四个字节)  
x = np.array([1,2,3,4,5], dtype = np.float32)  
x.itemsize
# 4
```

##### flags 返回了它们以下属性的当前值
C_CONTIGUOUS (C) 数组位于单一的、C 风格的连续区段内
F_CONTIGUOUS (F) 数组位于单一的、Fortran 风格的连续区段内
OWNDATA (O) 数组的内存从其它对象处借用
WRITEABLE (W) 数据区域可写入。 将它设置为flase会锁定数据，使其只读
ALIGNED (A) 数据和任何元素会为硬件适当对齐
UPDATEIFCOPY (U) 这个数组是另一数组的副本。当这个数组释放时，源数组会由这个数组中的元素更新

```
import numpy as np 
x = np.array([1,2,3,4,5])  
x.flags
# C_CONTIGUOUS : True 
# F_CONTIGUOUS : True 
# OWNDATA : True 
# WRITEABLE : True 
# ALIGNED : True 
# UPDATEIFCOPY : False
```